*nvim_image_extmarks.txt*                                 Image extmarks

================================================================================
INTRODUCTION                                            *nvim-image-extmarks-introduction*

        An extension to nvim's extmarks which supports sixel image content.

        [Sixels](https://en.wikipedia.org/wiki/Sixel) are a blob of binary
        data which, when written to a supported terminal, display an image.
        To see if your terminal is supoorted, a good resource to check is
        [Are We Sixel Yet?](https://www.arewesixelyet.com/).

        This plugin relies on ImageMagick for converting images into the
        equivalent sixels. Run:

        `magick -list format | grep -i sixel`

        to see if your installation supports sixels.

        Depending on version, ImageMagick command might be `convert` instead.
        See also |g:image_extmarks_imagemagick_command|.


CACHE                                                   *nvim-image-extmarks-cache*

        All generated sixels are cached locally (in Lua state) to improve
        performance. If the file changes in the filesystem, it will be
        necessary to clear this cache by calling |sixel_extmarks.clear_cache|.

        Images are cached by their height in rows, as well as how many rows
        are excluded from the top and bottom of the image.


TMUX                                                    *nvim-image-extmarks-tmux*

        As of writing this documentation, tmux, the terminal multiplexer,
        newly supports sixel content. However, if you experiment with this
        feature on your own, you may find that sixels are "sticky" between
        panes and windows.

        To get around this, when clearing the screen, the plugin will attempt
        to "refresh" the content in the session by quickly detaching and
        attaching. With enough delay, this produces visible artifacts,
        including:

            - boxes of "+" characters where the images would be displayed
            - sixel binary content, which appears as random ASCII characters


--------------------------------------------------------------------------------
COMMANDS                                                *nvim-image-extmarks-command*

:[range]CreateImage {filepath}                          *CreateImage*

        Create an image extmark with the given filename at the range
        specified. This wraps |sixel_extmarks.create| below.


--------------------------------------------------------------------------------
FUNCTIONS                                               *sixel_extmarks-functions*

All functions are accessed through |Lua|.


                                                        *sixel_extmarks.create*
sixel_extmarks.create(
  {start_row}: integer,
  {end_row}: integer,
  {path}: string
) -> integer

        Create a new image extmark which stretches from (0-indexed) line
        {start_row} to line {end_row} of the buffer and has content
        from the file at {path}.


                                                        *sixel_extmarks.create_virtual*
sixel_extmarks.create_virtual(
  {start_row}: integer,
  {height}: integer,
  {path}: string
) -> integer

        Create a new "virtual" image extmark on (0-indexed) line {start_row}
        of the buffer which is {height} rows tall and has content from the
        file at {path}.

        Virtual extmarks are only supported on Neovim >=0.10.


                                                        *sixel_extmarks.get*
sixel_extmarks.get(
  {start_row}: integer,
  {end_row}: integer
) -> image_extmark[]

        Retrieve a list of image extmarks in the current buffer between
        (0-indexed) rows {start_row} and {end_row}.
        To get all extmarks, set {start_row} to 0 and {end_row} to -1.

        The return value is a table with the following the structure:

            id:         An integer, signifying the id of the extmark.
            type:       "inline" if the extmark was created with |sixel_extmarks.create|.
                        "virtual" if the extmark was created with |sixel_extmarks.create_virtual|.
            start_row:  An integer; the row that the extmark starts on.
            end_row?:   An integer; the row that the extmark ends on.
                        Unset unless the extmark has type "inline".
            height?:    An integer; the height of the extmark in rows.
                        Unset unless the extmark has type "virtual".
            path:       A string, which is a path to the content.


                                                        *sixel_extmarks.get_by_id*
sixel_extmarks.get_by_id({id}: integer) -> image_extmark|nil

        Retrieve an extmark in the current buffer with the given id.


                                                        *sixel_extmarks.remove*
sixel_extmarks.remove({id}: integer)

        Delete the extmark in the current buffer identified by {id}.
        This does NOT free from the cache any of the blobs generated from
        the file the extmark points to.


                                                        *sixel_extmarks.remove_all*
sixel_extmarks.remove_all()

        Delete all extmarks in the current buffer. The same caveat about the
        cache applies here as well.


                                                        *sixel_extmarks.move*
sixel_extmarks.move({id}: integer, {start_row}: integer, {end_row}: integer)

        Move the extmark identified by {id}.

        If the extmark was created with |sixel_extmarks.create|, the image
        will stretch from line {start_row} to line {end_row}.
        Be aware that this can resize the image.

        If the extmark was created with |sixel_extmarks.create_virtual|,
        the image will be moved to the line {start_row} and {end_row}
        can be omitted. If given, {end_row} is the new height of the image
        in lines.


                                                        *sixel_extmarks.change_content*
sixel_extmarks.change_content({id}: integer, {path}: string)

        Change the content of the extmark identified by {id} to the file at
        {path}.


                                                        *sixel_extmarks.clear_cache*
sixel_extmarks.clear_cache()
sixel_extmarks.clear_cache({path}: string)
sixel_extmarks.clear_cache({paths}: string[])

        Clear the sixel blob cache. If no argument is supplied, then the entire
        cache is cleared.

        If {path}, a single string argument is supplied, then only the blobs
        for that file are removed.

        If {paths}, a list of strings are supplied, then all blobs for those
        files in the list are removed.


                                                        *sixel_extmarks.clear_screen*
sixel_extmarks.clear_screen()

        Clear all content drawn to the screen. Unlike |:mode|, this has the
        additional guarantee of working inside a tmux session.
        See also |nvim-image-extmarks-tmux|.


                                                        *sixel_extmarks.redraw*
sixel_extmarks.redraw()
sixel_extmarks.redraw({force}: boolean)

        Clear the screen and redraw the currently displayed content.


                                                        *sixel_extmarks.set_extmark_error*
sixel_extmarks.set_extmark_error(
  {id}: integer|image_extmark,
  {error_text}: string|nil
)

        Set error text on an extmark.

        {id} can be either the id of the extmark or a value returned by
        |sixel_extmarks.get|
        {error_text} is the error text to set on the extmark or nil if the error
        should be cleared.


                                                        *sixel_extmarks.disable_drawing*
sixel_extmarks.disable_drawing()

        Disable drawing blobs.

        Blobs will still be generated in the background, but the contents will not
        be pushed to the screen.


                                                        *sixel_extmarks.enable_drawing*
sixel_extmarks.enable_drawing()
sixel_extmarks.enable_drawing({redraw}: boolean)

        Enable drawing blobs, after having disabled them with
        |sixel_extmarks.disable_drawing|.

        If called with no arguments or {redraw} is true, the screen is
        redrawn, as if with `sixel_extmarks.redraw(true)`.


                                                        *sixel_extmarks.dump_blob_cache*
sixel_extmarks.dump_blob_cache()

        Generate a snapshot of the blob cache.
        Rather than the cache, the first two layers of keys are returned, i.e.,
        a table with filenames as keys and buffer ranges as values.


--------------------------------------------------------------------------------
CONFIGURATION                                           *nvim-image-extmarks-configuration*

g:image_extmarks_imagemagick_command                    *g:image_extmarks_imagemagick_command*

        Specifies the name of the command for invoking ImageMagick.

        Defaults to `magick`, or to `convert` if that command doesn't exist.


g:image_extmarks_buffer_ms                              *g:image_extmarks_buffer_ms*

        Controls the amount of delay, in milliseconds, between the screen
        being cleared and extmarks being redrawn. If multiple redraws occur in
        quick succession, then this can prevent flashing due to the screen
        clearing and redrawing.


g:image_extmarks_slow_insert                            *g:image_extmarks_slow_insert*

        Activates "slow" insert mode.
        
        When true, instead of attempting to redraw images as-necessary in
        insert mode, drawing is disabled when entering insert mode and a
        redraw is invoked upon exiting insert mode.


g:image_extmarks_disable_fold_remaps                    *g:image_extmarks_disable_fold_remaps*

        Disables remapping keys which interact with folds to also force
        images to redraw.
        This can be a boolean (i.e., 0 or 1) or a list.

        If a truthy boolean, no remaps will take place.

        If a list, then the entries will be interpreted as maps (such as "zf") to
        NOT remap.


--------------------------------------------------------------------------------
AUTOCMDS                                                *nvim-sixel-extmarks-autocmds*
                                                        *ImageExtmarks*

        |autocmd|s which are used by the plugin live under the group
        `ImageExtmarks`. These include:

        - |TextChanged|, |TextChangedI|, |CursorMoved| (Buffer-local)
            - Attempt to redraw, if necessary
        - |InsertEnter|, |InsertLeave| (Buffer-local)
            - See |g:image_extmarks_slow_insert|
        - |TabClosed|
            - Attempt to redraw, if necessary
        - |VimEnter|, |VimResized|, |TabEnter|
            - Force redraw
        - |TabLeave|, |ExitPre|
            - Clear the screen of all sixel images
        
        These attempt to replicate the feel of normal text extmarks without
        extra configuration.
        They can be overridden or unbound at your leisure using |autocmd|!.


EVENTS                                                  *nvim-sixel-extmarks-events*
                                                        *ImageExtmarks#pre_draw*

        `User`-type autocmds are fired under the `ImageExtmarks#pre_draw`
        group immediately before drawing sixel blobs.


--------------------------------------------------------------------------------
FOLDING                                                 *nvim-sixel-extmarks-folding*

        The plugin tends to respect folds in two ways:

        - If an extmark intersects with a fold, then the image is not drawn
        - If a fold is completely contained by an extmark, the image will be
          resized to the folded height

        However, opening and closing folds will NOT automatically trigger
        a redraw. Unfortunately, this is a Neovim limitation -- folding
        commands and keybinds do not trigger any autocmds (even |WinScrolled|).

        To get around this, the default commands which interact with folding
        (those which start with z) are remapped to perform their normal action
        AND call the redraw function. These maps are buffer-local and are added
        along with the buffer-local autocmds above.
        See |g:image_extmarks_disable_fold_remaps| for controlling this.

                                                        *nvim-sixel-extmarks-Ex-command*

        Similarly to folds, there is no way to detect when the terminal is
        scrolled with an Ex command, which can cause phantom image artifacts
        to be remain. This extends to |fold|, |foldopen|, ...


================================================================================
vim:tw=80:nosta:ft=help:fen:
